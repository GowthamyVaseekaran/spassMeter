<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
    <module name="JavadocPackage"> <!-- disable for Java I-->
        <property name="allowLegacy" value="true"/>
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <!--<module name="NewlineAtEndOfFile"/>-->

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <!--<module name="Translation"/>-->

	<!-- Checks for duplicate code                         -->
    <!-- See http://checkstyle.sf.net/config_duplicates.html -->
    <!-- enable in Java I -->

    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="checkstyle: stop parameter number check"/>
        <property name="onCommentFormat" value="checkstyle: resume parameter number check"/>
        <property name="checkFormat" value="ParameterNumberCheck"/>
    </module>

    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="checkstyle: stop member visibility check"/>
        <property name="onCommentFormat" value="checkstyle: resume member visibility check"/>
        <property name="checkFormat" value="VisibilityModifier"/>
    </module>
    
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="checkstyle: stop javadoc check"/>
        <property name="onCommentFormat" value="checkstyle: resume javadoc check"/>
        <property name="checkFormat" value="Javadoc*"/>
    </module>

    <module name="FileLength">
	    <property name="max" value="2000"/>
	</module>
    <module name="FileTabCharacter"/>
	
    <module name="TreeWalker">

	<!-- PRobLeM: check for empty javadoc comments -->
        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->

        <module name="FileContentsHolder"/>

        <module name="JavadocMethod">
		  <property name="scope" value="private"/>
		  <property name="allowUndeclaredRTE" value="true"/>
		  <property name="allowMissingJavadoc" value="false"/>
		  <property name="allowMissingPropertyJavadoc" value="false"/>
		</module>
        <module name="JavadocType">
		  <property name="scope" value="private"/>
		</module>
        <module name="JavadocVariable">
		  <property name="scope" value="private"/>
		</module>
        <module name="JavadocStyle">
			<property name="checkFirstSentence" value="true"/>
			<property name="checkEmptyJavadoc" value="true"/>
			<property name="checkHtml" value="true"/>
		</module>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="AbstractClassName">
		    <property name="format" value="^[A-Z][a-zA-Z0-9]+$"/> <!-- 2chars, ^Abstract.*$|^.*Factory$-->
            <property name="ignoreModifier" value="true"/>
		</module>
        <module name="ConstantName">
		    <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
		</module>
        <module name="LocalFinalVariableName">
		    <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
        <module name="LocalVariableName">
		    <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
        <module name="MemberName">
		    <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		    <property name="applyToPublic" value="true"/>
		    <property name="applyToProtected" value="true"/>
		    <property name="applyToPackage" value="true"/>
		    <property name="applyToPrivate" value="true"/>
		</module>
        <module name="MethodName">
		    <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
        <module name="PackageName">
		    <property name="format" value="^[a-z][a-zA-Z0-9_]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/> <!-- ^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$ -->
		</module>
        <module name="ParameterName">
		    <property name="format" value="^[a-z][a-zA-Z0-9]+$"/> <!-- 2chars-->
		</module>
        <module name="StaticVariableName">
		    <property name="format" value="^[a-z][a-zA-Z0-9]+$"/> <!-- 2chars-->
		</module>
        <module name="TypeName">
		    <property name="format" value="^[A-Z][a-zA-Z0-9]+$"/> <!-- 2chars-->
		</module>

        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project. See property      -->
            <!-- expansion,                                             -->
            <!-- http://checkstyle.sf.net/config.html#properties        -->
            <!-- <property                                              -->
            <!--     name="headerFile"                                  -->
            <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <!--<module name="AvoidStarImport"/>-->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
		<!-- no restriction on import order -->


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
		<!--<module name="ExecutableStatementCounts">
		    <property name="max" value="30"/>
		</module>-->
        <module name="LineLength">
		    <property name="ignorePattern" value="^$"/>
		    <property name="max" value="80"/>
		</module>
        <module name="MethodLength">
		    <property name="max" value="150"/>
			<property name="countEmpty" value="true"/>
		</module>
		<!--<module name="AnonInnerLength">
		    <property name="max" value="20"/>
		</module>-->
        <module name="ParameterNumber">
		    <property name="max" value="5"/>
		    <property name="tokens" value="METHOD_DEF"/>
		</module>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="EmptyForInitializerPad">
		    <property name="option" value="nospace"/>
		</module>
        <module name="EmptyForIteratorPad">
		    <property name="option" value="nospace"/>
		</module>
        <module name="MethodParamPad">
		    <property name="allowLineBreaks" value="false"/>
		</module>
        <module name="NoWhitespaceAfter">
		    <property name="allowLineBreaks" value="true"/>
			<property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/> <!-- ARRAY_INIT -->
		</module>
        <module name="NoWhitespaceBefore">
		    <property name="allowLineBreaks" value="false"/>
			<property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
		</module>
        <module name="OperatorWrap">
		    <property name="option" value="nl"/>
			<property name="tokens" value="BAND, BOR, BSR, BXOR, COLON, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR"/>  
		</module>
        <module name="ParenPad">
		    <property name="option" value="nospace"/>
			<property name="tokens" value="CTOR_CALL, METHOD_CALL, SUPER_CTOR_CALL"/> <!-- LPAREN, RPAREN,  -->
		</module>
        <module name="TypecastParenPad">
		    <property name="option" value="nospace"/>
			<property name="tokens" value="TYPECAST, RPAREN"/>
		</module>
        <module name="WhitespaceAfter">
		    <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
		</module>
        <module name="WhitespaceAround">
		    <property name="allowEmptyConstructors" value="true"/>
			<property name="allowEmptyMethods" value="true"/>
			<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
			<!-- GENERIC_START, GENERIC_END,, WILDCARD_TYPE -->
		</module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <!--<module name="RedundantModifier">
		    <property name="tokens" value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF"/>
		</module>-->


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
			<property name="allowInSwitchCase" value="true"/>
		</module>
        <module name="EmptyBlock">
			<property name="option" value="stmt"/> <!-- text-->
		    <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT"/> <!--LITERAL_CATCH,-->
		</module>
        <module name="LeftCurly">
			<property name="option" value="eol"/> <!-- nl, nlow-->
			<property name="maxLineLength" value="80"/>
		    <property name="tokens" value="CLASS_DEF, CTOR_DEF, INTERFACE_DEF, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF"/> 
		</module>
        <module name="NeedBraces">
		    <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_IF, LITERAL_FOR, LITERAL_WHILE"/> 
		</module>
        <module name="RightCurly">
			<property name="option" value="same"/> <!-- same, alone-->
			<property name="shouldStartLine" value="true"/>
		    <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE"/> 
		</module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--<module name="ArrayTrailingComma"/>-->
        <!--<module name="AvoidInlineConditionals"/>-->
		<!--<module name="CovariantEquals"/>-->
        <!--<module name="DoubleCheckedLocking"/>-->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
		<!--<module name="FinalLocalVariable"/>-->
		<!--<module name="HiddenField"/>-->
        <!--<module name="IllegalInstantiation"/>-->
        <!--<module name="IllegalToken">
		    <property name="tokens" value="LITERAL_SWITCH, POST_INC, POST_DEC"/>
		</module>-->
		<!--<module name="InnerAssignment"/>-->
		<module name="ModifiedControlVariable"/>
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/> 
        <module name="SimplifyBooleanReturn"/>
		<module name="StringLiteralEquality"/>
		<module name="NestedIfDepth">
			<property name="max" value="4"/>
		</module>
		<module name="NestedTryDepth">
			<property name="max" value="1"/>
		</module>
		<module name="SuperFinalize"/>
		<module name="JUnitTestCase"/>
		<module name="DeclarationOrder"/>
		<module name="DefaultComesLast"/>
		<module name="FallThrough">
			<property name="checkLastCaseGroup" value="true"/>
			<property name="reliefPattern" value="fallthru|falls? ?through"/>
		</module>
		<module name="MultipleVariableDeclarations"/>

        <module name="VisibilityModifier">
			<property name="packageAllowed" value="false"/>
			<property name="protectedAllowed" value="true"/>
			<property name="publicMemberPattern" value="^serialVersionUID$"/>
		</module>
		<module name="HideUtilityClassConstructor"/>
		
		<!-- Checks for duplicate code                         -->
        <!-- See http://checkstyle.sf.net/config_metrics.html -->
        <module name="BooleanExpressionComplexity">
			<property name="max" value="3"/>
		</module>
		
        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="UpperEll"/>
		<module name="Indentation">
			<property name="basicOffset" value="4"/>
			<property name="braceAdjustment" value="0"/>
			<property name="caseIndent" value="0"/>
		</module>
    </module>

</module>
